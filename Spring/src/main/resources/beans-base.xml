<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation=
		"http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"
        default-lazy-init="true">
    <!-- abstract bean which is lazy initial. -->
	<!-- bean start -->
	<bean id="setterUser" class="com.study.spring.base.domain.User">
		<property name="name" value="TOM"/>
		<property name="age" value="23"/>
		<property name="married" value="false" />
		<property name="sex" value="M" />
	</bean>
	<!-- dependency injection start -->
	<!-- *****setter based dependency injection start**** -->
	<bean id="setterDIBean" class="com.study.spring.bean.ioc.DependencyInjection">
		<property name="setterBasedUser" ref="setterUser" />
	</bean>
	<!-- *****setter based dependency injection end***** -->

	<!-- *****factory dependency injection start***** -->
	<!-- 非静态工厂 -->
	<!-- 注册工厂bean -->
	<bean id="userFactory" class="com.study.spring.bean.ioc.UserFactory" />
	<!-- 目标bean class 可以不写 -->
	<bean id="factoryDIBean" 
		factory-bean="userFactory"
		factory-method="createUser"/>
	<!-- 静态工厂 -->
	<!-- 目标bean class不用写 -->
	<bean id="staticFactoryDIBean" 
		class="com.study.spring.bean.ioc.UserFactory" 
		factory-method="staticCreateUser" scope="prototype"/>
	<!-- *****factory dependency injection end***** -->
	<!-- dependency injection end -->
	
	<!-- method injection s -->
	<!-- 
		向singleton bean中注入prototype bean，并且每次调用都能获取不同的prototype bean的两种实现方式
		1. singleton bean实现BeanFactoryAware接口，与Spring框架耦合度高，不建议使用
		2. lookup方法注入，即通过动态代理的方式注入prototype bean
	 -->
	 <bean id="prototypeBean" class="com.study.spring.base.domain.User" scope="prototype">
		<property name="name" value="TOM"/>
		<property name="age" value="23"/>
		<property name="married" value="false" />
		<property name="sex" value="M" />
	 </bean>
	 <bean id="singletonBean1" class="com.study.spring.bean.ioc.InjectPB2SBBaseOnSpring"/>
	 <bean id="singletonBean2" class="com.study.spring.bean.ioc.InjectPB2SBBaseOnDynamicProxy">
	 	<lookup-method bean="prototypeBean" name="getUser"/>
	 </bean>
	 <!-- method injection e -->
	 
	<!-- bean end -->
</beans>