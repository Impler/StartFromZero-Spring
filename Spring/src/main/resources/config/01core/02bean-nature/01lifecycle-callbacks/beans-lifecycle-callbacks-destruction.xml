<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 
		DisposableBean接口允许在Spring容器销毁之前，依次执行被托管的DisposableBean的destroy()方法，完成特定的销毁操作。但这种方式和Spring API耦合在一起
	 -->
	
	<!-- DisposableBean s -->
	<bean id="disposableBean" class="com.study.spring._01core._02bean_nature._01lifecycle_callbacks.destruction.FooDisposableBean"></bean>
	<!-- DisposableBean e -->
	
	<!-- 可以配置bean 元素的destroy-method属性在一个POJO 的bean中添加生命周期逻辑 -->
	 <!-- destroy-method s-->
	<bean id="destroyMethodBean"
		class="com.study.spring._01core._02bean_nature._01lifecycle_callbacks.destruction.FooDestroyMethodBean"
		destroy-method="onDestroy">
	 </bean>
	 <!-- destroy-method e-->
	 
	 <!-- 
	 	如果一个bean既配置了destroy-method，又实现了DisposableBean接口，那么执行顺序为:
	 	1 destroy()
	 	3 destroy-method
	 	如果多种方式指定的是同一个方法，那么只执行一次
	  -->
	 <!-- allInOne s -->
	<bean id="allInOne"
		class="com.study.spring._01core._02bean_nature._01lifecycle_callbacks.destruction.AllIn"
		destroy-method="onDestroy">
	</bean>
	 <!-- allInOne e -->
	 
	 <!-- 
	 	在<beans/>元素中可以添加default-destroy-method="xxx"属性，指定全局的destroy-method。
	 	如果bean中存在指定的全局方法名，容器则在特定的时刻调用该方法
	 	如果bean中不存在则不执行
	 	具体指定了destroy-method的<bean />元素，将会忽略default-destroy-method的配置
	  -->
</beans>