<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 
		InitializingBean接口允许在Spring容器实例化Bean并将所有必要的属性设置完毕后执行特定的初始化操作，但这种方式和Spring API耦合在一起
	 -->
	 <!-- InitializingBean s -->
	<bean id="initializingBean"
		class="com.study.spring._01core._02bean_nature._01lifecycle_callbacks.initialization.FooInitializationBean">
		<!-- setName()先于afterPropertiesSet()方法执行-->
		<property name="name" value="fooName" />
	 </bean>
	 <!-- InitializingBean e -->
	 
	 
	 <!-- 可以配置bean 元素的init-method属性在一个POJO 的bean中添加生命周期逻辑 -->
	 <!-- init-method s-->
	<bean id="initMethodBean"
		class=" com.study.spring._01core._02bean_nature._01lifecycle_callbacks.initialization.FooInitMethodBean"
		init-method="init">
		<!-- setName()先于 init-method方法执行-->
	 	<property name="name" value="fooName" />
	 </bean>
	 <!-- init-method e-->
	 
	 <!-- 
	 	如果一个bean既配置了init-method，又实现了InitializingBean接口，那么执行顺序为:
	 	1 set properties
	 	2 afterPropertiesSet()
	 	3 init-method
	 	如果多种方式指定的是同一个方法，那么只执行一次
	  -->
	 <!-- allInOne s -->
	<bean id="allInOne"
		class="com.study.spring._01core._02bean_nature._01lifecycle_callbacks.initialization.AllIn"
		init-method="init">
	 	<property name="name" value="fooName" />
	</bean>
	 <!-- allInOne e -->
	 
	 <!-- 
	 	在<beans/>元素中可以添加default-init-method="xxx"属性，指定全局的init-method。
	 	如果bean中存在指定的全局方法名，容器则在特定的时刻调用该方法
	 	如果bean中不存在则不执行
	 	具体指定了init-method的<bean />元素，将会忽略default-init-method的配置
	  -->
</beans>