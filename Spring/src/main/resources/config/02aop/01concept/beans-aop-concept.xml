<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 
		Aspect-Oriented Programming (AOP) 面向切面编程是面向对象编程(OOP)之外的另一种编程思想。
		面向对象编程是以类为基本单元，而面向切面编程的基本单元是切面。
		AOP是Spring的核心技术之一，但Spring IOC容器并不依赖AOP，而AOP却能增强IOC容器的功能。
		AOP提供声明式的企业级服务来替代EJB，例如声明式事务处理。此外还允许用户在面向对象的程序中定义切面，补强功能。
	 -->
	
	<!-- 
		AOP中的重要概念：
		Join Point：连接点。程序执行特定的点，如方法执行前、后，异常抛出时等
		Advice：增强。在特定的连接点，AOP植入的额外的程序逻辑，包括前置、后置、环绕增强等。一般采用拦截器链实现
		Pointcut：切点。满足一定条件的连接点的集合。Spring默认使用AspectJ 切点表达式语言定义切点
		Introduction：引介。为目标对象新增属性和方法
		Aspect：切面。切面由切点和增强组成，它既包括了横切逻辑的定义，也包括了连接点的定义。Spring AOP的工作就是将切面定义的横切逻辑织入到切面定义的连接点中
		Target object：目标对象。被织入增强的普通对象
		AOP proxy：AOP代理。AOP框架生成的目标对象的代理对象，一般基于JDK动态代理或CGLIB代理实现。Spring默认使用JDK 基于接口的动态代理实现。
		Weaving：织入。将增强添加到目标对象指定连接点的过程。三种织入方式：1 编译器织入 2 类装载器织入 3 动态代理织入 Spring采用动态代理织入，AspectJ采用编译器织入和类装载期织入。
	 -->
	 
	 <!-- 
	 	增强类型：
	 	Before advice：前置增强。org.springframework.aop.BeforeAdvice代表前置增强，因为Spring只支持方法级别的增强（AspectJ支持属性级别增强），所以MethodBeforeAdvice是目前可用的前置增强，表示在目标方法执行前实施增强
		After returning advice：后置增强。org.springframework.aop.AfterReturningAdvice代表后置增强，表示在目标方法执行后实施增强
		Around advice：环绕增强。org.aopalliance.intercept.MethodInterceptor代表环绕增强，表示在目标方法执行前后实施增强
		After throwing advice：异常抛出增强。org.springframework.aop.ThrowsAdvice代表抛出异常增强，表示在目标方法抛出异常后实施增强
		Intorduction advice：引介增强。org.springframework.aop.IntroductionInterceptor代表引介增强，表示在目标类中添加新的方法和属性
	  -->
	 
	 <!-- 
	 	Spring AOP并没有提供完全的AOP实现,仅支持在spring bean方法级别的切点，如果需要更细粒度的在属性级别上的切点，可以使用AspectJ。
	  -->
	 <!-- 
	 	启用@AspectJ支持
	 	1 基于java的配置
	 		在@Configuration标识的配置类上添加@EnableAspectJAutoProxy注解
	 	2 基于xml的配置
	 		引入aop schema，并添加元素<aop:aspectj-autoproxy/>
	  -->
</beans>