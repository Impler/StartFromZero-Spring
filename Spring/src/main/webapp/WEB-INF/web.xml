<web-app xmlns="http://java.sun.com/xml/ns/javaee"  
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
          xsi:schemaLocation="http://java.sun.com/xml/ns/javaee   
          http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"  
          version="2.5">  

  <display-name>Spring Learning</display-name>
  
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<!-- 指定业务层Spring容器的配置文件 -->
  	<param-value>classpath:mvc-context.xml</param-value>
  </context-param>
  
  <listener>
  	<!-- ContextLoaderListener是一个ServletContextListener, 它通过contextConfigLocation参数所指定的配置文件启动业务层Spring容器（父容器） -->
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <servlet>
  	<servlet-name>mvc</servlet-name>
  	<!-- 默认加载WEB-INF/<servlet-name>-servlet.xml 此处为mvc-servlet.xml-->
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<!-- 
  		除了使用DispatcherServlet默认的操作外，也可以通过contextConfigLocation属性值，指定WebApplicationContext对应的配置文件
  	 -->
  	 <!-- 
  	 	每个DisptcherServlet都拥有自己独立的WebApplicationContext，并且继承父容器所有定义的bean，即子容器可以访问父容器内的bean，反之不可。
  	 	可以在自己的WebApplicationContext定义bean
  	  -->
  	 <init-param>
  	 	<param-name>contextConfigLocation</param-name>
  	 	<param-value>/WEB-INF/mvc-servlet.xml</param-value>
  	 </init-param>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>mvc</servlet-name>
  	<url-pattern>/</url-pattern>
  </servlet-mapping>
</web-app>
